name: üöÄ D√©ploiement sur Infomaniak

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      migrate_db:
        description: 'Ex√©cuter la migration de la base de donn√©es'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Cloner le d√©p√¥t
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Installer les d√©pendances
        run: npm ci

      - name: üß™ Ex√©cuter les tests
        run: npm test || true

      - name: üì¶ Build du projet
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_GITHUB_TOKEN: ${{ secrets.VITE_GITHUB_TOKEN }}
          VITE_POCKETBASE_URL: ${{ secrets.VITE_POCKETBASE_URL }}
          VITE_DB_HOST: ${{ secrets.DB_HOST }}
          VITE_DB_PORT: ${{ secrets.DB_PORT }}
          VITE_DB_USER: ${{ secrets.DB_USER }}
          VITE_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          VITE_DB_NAME: ${{ secrets.DB_NAME }}
          VITE_DB_SSL: ${{ secrets.DB_SSL }}

      - name: üóÉÔ∏è Ex√©cuter les migrations de base de donn√©es
        if: github.event.inputs.migrate_db == 'true'
        run: |
          echo "Ex√©cution des migrations de base de donn√©es..."
          # Utilisation de mysql client pour ex√©cuter les scripts SQL
          mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < ./backend/db-init/01-schema.sql
          mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < ./backend/db-init/02-feature-tables.sql
          mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < ./backend/db-init/03-default-users.sql
          echo "Migrations termin√©es avec succ√®s."
        continue-on-error: true

      - name: üì§ D√©ploiement via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: /home/clients/182ddf0dfc453b3faeaee042d1660720/sites/
          dangerous-clean-slate: true

      - name: üîß D√©ployer la configuration du serveur
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./server-config/
          server-dir: /home/clients/182ddf0dfc453b3faeaee042d1660720/config/
          dangerous-clean-slate: false

      - name: üì¶ D√©ployer le backend
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./backend/
          server-dir: /home/clients/182ddf0dfc453b3faeaee042d1660720/api/
          dangerous-clean-slate: false
          exclude: |
            node_modules/**
            tests/**
            *.log

      - name: üì® Notification webhook
        if: success()
        run: |
          curl -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{"status":"success","commit":"'$GITHUB_SHA'","branch":"'$GITHUB_REF_NAME'","time":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'
        continue-on-error: true

      - name: ‚úÖ Notification de d√©ploiement
        run: echo "D√©ploiement termin√© avec succ√®s!"
